From be97656e887e590fe5cf64cf9574459e4d2f29c0 Mon Sep 17 00:00:00 2001
From: Simon Kelley <simon@thekelleys.org.uk>
Date: Mon, 25 Sep 2017 18:17:11 +0100
Subject: [PATCH] Security fix, CVE-2017-14491 DNS heap buffer overflow.

    Fix heap overflow in DNS code. This is a potentially serious
    security hole. It allows an attacker who can make DNS
    requests to dnsmasq, and who controls the contents of
    a domain, which is thereby queried, to overflow
    (by 2 bytes) a heap buffer and either crash, or
    even take control of, dnsmasq.
---
 src/dnsmasq.h |  2 +-
 src/rfc1035.c | 35 ++++++++++++++++++++++++++++++-----
 src/rfc2131.c |  4 ++--
 src/util.c    | 10 ++++++++--
 4 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 227e460..036219b 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -724,7 +724,7 @@ void rand_init(void);
 unsigned short rand16(void);
 int legal_char(char c);
 int canonicalise(char *s);
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval);
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit);
 void *safe_malloc(size_t size);
 void safe_pipe(int *fd, int read_noblock);
 void *whine_malloc(size_t size);
diff --git a/src/rfc1035.c b/src/rfc1035.c
index 6a819bb..fbe6233 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -1027,6 +1027,12 @@ static int add_resource_record(HEADER *header, char *limit, int *truncp, unsigne
   unsigned short usval;
   long lval;
   char *sval;
+#define CHECK_LIMIT(size) \
+  if (limit && p + (size) > (unsigned char*)limit) \
+    { \
+      va_end(ap); \
+      goto truncated; \
+    }
 
   if (truncp && *truncp)
     return 0;
@@ -1041,11 +1047,16 @@ static int add_resource_record(HEADER *header, char *limit, int *truncp, unsigne
 
   va_start(ap, format);   /* make ap point to 1st unamed argument */
   
+
+  /* nameoffset (2) + type (2) + class (2) + ttl (4) + 0 (2) */
+  CHECK_LIMIT(12);
+
   for (; *format; format++)
     switch (*format)
       {
 #ifdef HAVE_IPV6
       case '6':
+        CHECK_LIMIT(IN6ADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, IN6ADDRSZ);
 	p += IN6ADDRSZ;
@@ -1053,31 +1064,41 @@ static int add_resource_record(HEADER *header, char *limit, int *truncp, unsigne
 #endif
 	
       case '4':
+        CHECK_LIMIT(INADDRSZ);
 	sval = va_arg(ap, char *); 
 	memcpy(p, sval, INADDRSZ);
 	p += INADDRSZ;
 	break;
 	
       case 's':
+        CHECK_LIMIT(2);
 	usval = va_arg(ap, int);
 	PUTSHORT(usval, p);
 	break;
 	
       case 'l':
+        CHECK_LIMIT(4);
 	lval = va_arg(ap, long);
 	PUTLONG(lval, p);
 	break;
 	
       case 'd':
-	/* get domain-name answer arg and store it in RDATA field */
-	if (offset)
-	  *offset = p - (unsigned char *)header;
-	p = do_rfc1035_name(p, va_arg(ap, char *));
-	*p++ = 0;
+        /* get domain-name answer arg and store it in RDATA field */
+        if (offset)
+          *offset = p - (unsigned char *)header;
+        p = do_rfc1035_name(p, va_arg(ap, char *), limit);
+        if (!p)
+          {
+            va_end(ap);
+            goto truncated;
+          }
+        CHECK_LIMIT(1);
+        *p++ = 0;
 	break;
 	
       case 't':
 	usval = va_arg(ap, int);
+        CHECK_LIMIT(usval);
 	sval = va_arg(ap, char *);
 	memcpy(p, sval, usval);
 	p += usval;
@@ -1088,20 +1109,24 @@ static int add_resource_record(HEADER *header, char *limit, int *truncp, unsigne
 	usval = sval ? strlen(sval) : 0;
 	if (usval > 255)
 	  usval = 255;
+        CHECK_LIMIT(usval + 1);
 	*p++ = (unsigned char)usval;
 	memcpy(p, sval, usval);
 	p += usval;
 	break;
       }
 
+#undef CHECK_LIMIT
   va_end(ap);	/* clean up variable argument pointer */
   
   j = p - sav - 2;
+  /* this has already been checked against limit before */
   PUTSHORT(j, sav);     /* Now, store real RDLength */
   
   /* check for overflow of buffer */
   if (limit && ((unsigned char *)limit - p) < 0)
     {
+truncated:
       if (truncp)
 	*truncp = 1;
       return 0;
diff --git a/src/rfc2131.c b/src/rfc2131.c
index 35047ab..21ebc98 100644
--- a/src/rfc2131.c
+++ b/src/rfc2131.c
@@ -2167,9 +2167,9 @@ static void do_options(struct dhcp_context *context,
 
 	      if (fqdn_flags & 0x04)
 		{
-		  p = do_rfc1035_name(p, hostname);
+		  p = do_rfc1035_name(p, hostname, NULL);
 		  if (domain)
-		    p = do_rfc1035_name(p, domain);
+		    p = do_rfc1035_name(p, domain, NULL);
 		  *p++ = 0;
 		}
 	      else
diff --git a/src/util.c b/src/util.c
index e9fe27d..49bab2b 100644
--- a/src/util.c
+++ b/src/util.c
@@ -139,15 +139,21 @@ int canonicalise(char *s)
   return nowhite;
 }
 
-unsigned char *do_rfc1035_name(unsigned char *p, char *sval)
+unsigned char *do_rfc1035_name(unsigned char *p, char *sval, char *limit)
 {
   int j;
   
   while (sval && *sval)
     {
+      if (limit && p + 1 > (unsigned char*)limit)
+        return p;
+
       unsigned char *cp = p++;
       for (j = 0; *sval && (*sval != '.'); sval++, j++)
-	*p++ = *sval;
+        if (limit && p + 1 > (unsigned char*)limit)
+          return p;
+        else
+          *p++ = *sval;
       *cp  = j;
       if (*sval)
 	sval++;
-- 
2.9.5

